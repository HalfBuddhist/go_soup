// WARNING: This file has automatically been generated on Thu, 18 Apr 2024 15:59:58 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package tcml

/*
#include "tcml.h"
#include "stdlib.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"fmt"
	"runtime"
	"sync"
	"unsafe"
)

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// allocUtilizationMemory allocates memory for type C.tcmlUtilization_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocUtilizationMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfUtilizationValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfUtilizationValue = unsafe.Sizeof([1]C.tcmlUtilization_t{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *Utilization) Ref() *C.tcmlUtilization_t {
	if x == nil {
		return nil
	}
	return x.refaa2e28e9
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *Utilization) Free() {
	if x != nil && x.allocsaa2e28e9 != nil {
		x.allocsaa2e28e9.(*cgoAllocMap).Free()
		x.refaa2e28e9 = nil
	}
}

// NewUtilizationRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewUtilizationRef(ref unsafe.Pointer) *Utilization {
	if ref == nil {
		return nil
	}
	obj := new(Utilization)
	obj.refaa2e28e9 = (*C.tcmlUtilization_t)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *Utilization) PassRef() (*C.tcmlUtilization_t, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.refaa2e28e9 != nil {
		return x.refaa2e28e9, nil
	}
	memaa2e28e9 := allocUtilizationMemory(1)
	refaa2e28e9 := (*C.tcmlUtilization_t)(memaa2e28e9)
	allocsaa2e28e9 := new(cgoAllocMap)
	allocsaa2e28e9.Add(memaa2e28e9)

	var cgpu_allocs *cgoAllocMap
	refaa2e28e9.gpu, cgpu_allocs = (C.uint32_t)(x.Gpu), cgoAllocsUnknown
	allocsaa2e28e9.Borrow(cgpu_allocs)

	var cmemory_allocs *cgoAllocMap
	refaa2e28e9.memory, cmemory_allocs = (C.uint32_t)(x.Memory), cgoAllocsUnknown
	allocsaa2e28e9.Borrow(cmemory_allocs)

	x.refaa2e28e9 = refaa2e28e9
	x.allocsaa2e28e9 = allocsaa2e28e9
	return refaa2e28e9, allocsaa2e28e9

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x Utilization) PassValue() (C.tcmlUtilization_t, *cgoAllocMap) {
	if x.refaa2e28e9 != nil {
		return *x.refaa2e28e9, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *Utilization) Deref() {
	if x.refaa2e28e9 == nil {
		return
	}
	x.Gpu = (uint32)(x.refaa2e28e9.gpu)
	x.Memory = (uint32)(x.refaa2e28e9.memory)
}

// allocMemoryMemory allocates memory for type C.tcmlMemory_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocMemoryMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfMemoryValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfMemoryValue = unsafe.Sizeof([1]C.tcmlMemory_t{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *Memory) Ref() *C.tcmlMemory_t {
	if x == nil {
		return nil
	}
	return x.ref3fa2f6bd
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *Memory) Free() {
	if x != nil && x.allocs3fa2f6bd != nil {
		x.allocs3fa2f6bd.(*cgoAllocMap).Free()
		x.ref3fa2f6bd = nil
	}
}

// NewMemoryRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewMemoryRef(ref unsafe.Pointer) *Memory {
	if ref == nil {
		return nil
	}
	obj := new(Memory)
	obj.ref3fa2f6bd = (*C.tcmlMemory_t)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *Memory) PassRef() (*C.tcmlMemory_t, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.ref3fa2f6bd != nil {
		return x.ref3fa2f6bd, nil
	}
	mem3fa2f6bd := allocMemoryMemory(1)
	ref3fa2f6bd := (*C.tcmlMemory_t)(mem3fa2f6bd)
	allocs3fa2f6bd := new(cgoAllocMap)
	allocs3fa2f6bd.Add(mem3fa2f6bd)

	var ctotal_allocs *cgoAllocMap
	ref3fa2f6bd.total, ctotal_allocs = (C.uint64_t)(x.Total), cgoAllocsUnknown
	allocs3fa2f6bd.Borrow(ctotal_allocs)

	var cfree_allocs *cgoAllocMap
	ref3fa2f6bd.free, cfree_allocs = (C.uint64_t)(x.Free), cgoAllocsUnknown
	allocs3fa2f6bd.Borrow(cfree_allocs)

	var cused_allocs *cgoAllocMap
	ref3fa2f6bd.used, cused_allocs = (C.uint64_t)(x.Used), cgoAllocsUnknown
	allocs3fa2f6bd.Borrow(cused_allocs)

	x.ref3fa2f6bd = ref3fa2f6bd
	x.allocs3fa2f6bd = allocs3fa2f6bd
	return ref3fa2f6bd, allocs3fa2f6bd

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x Memory) PassValue() (C.tcmlMemory_t, *cgoAllocMap) {
	if x.ref3fa2f6bd != nil {
		return *x.ref3fa2f6bd, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *Memory) Deref() {
	if x.ref3fa2f6bd == nil {
		return
	}
	x.Total = (uint64)(x.ref3fa2f6bd.total)
	x.Free = (uint64)(x.ref3fa2f6bd.free)
	x.Used = (uint64)(x.ref3fa2f6bd.used)
}

// allocClockMemory allocates memory for type C.tcmlClock_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocClockMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfClockValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfClockValue = unsafe.Sizeof([1]C.tcmlClock_t{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *Clock) Ref() *C.tcmlClock_t {
	if x == nil {
		return nil
	}
	return x.ref23293422
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *Clock) Free() {
	if x != nil && x.allocs23293422 != nil {
		x.allocs23293422.(*cgoAllocMap).Free()
		x.ref23293422 = nil
	}
}

// NewClockRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewClockRef(ref unsafe.Pointer) *Clock {
	if ref == nil {
		return nil
	}
	obj := new(Clock)
	obj.ref23293422 = (*C.tcmlClock_t)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *Clock) PassRef() (*C.tcmlClock_t, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.ref23293422 != nil {
		return x.ref23293422, nil
	}
	mem23293422 := allocClockMemory(1)
	ref23293422 := (*C.tcmlClock_t)(mem23293422)
	allocs23293422 := new(cgoAllocMap)
	allocs23293422.Add(mem23293422)

	var ccurrent_allocs *cgoAllocMap
	ref23293422.current, ccurrent_allocs = (C.uint64_t)(x.Current), cgoAllocsUnknown
	allocs23293422.Borrow(ccurrent_allocs)

	var cmax_allocs *cgoAllocMap
	ref23293422.max, cmax_allocs = (C.uint64_t)(x.Max), cgoAllocsUnknown
	allocs23293422.Borrow(cmax_allocs)

	x.ref23293422 = ref23293422
	x.allocs23293422 = allocs23293422
	return ref23293422, allocs23293422

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x Clock) PassValue() (C.tcmlClock_t, *cgoAllocMap) {
	if x.ref23293422 != nil {
		return *x.ref23293422, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *Clock) Deref() {
	if x.ref23293422 == nil {
		return
	}
	x.Current = (uint64)(x.ref23293422.current)
	x.Max = (uint64)(x.ref23293422.max)
}

// allocPciInfoMemory allocates memory for type C.tcmlPciInfo_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocPciInfoMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfPciInfoValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfPciInfoValue = unsafe.Sizeof([1]C.tcmlPciInfo_t{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *PciInfo) Ref() *C.tcmlPciInfo_t {
	if x == nil {
		return nil
	}
	return x.ref71ae7c45
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *PciInfo) Free() {
	if x != nil && x.allocs71ae7c45 != nil {
		x.allocs71ae7c45.(*cgoAllocMap).Free()
		x.ref71ae7c45 = nil
	}
}

// NewPciInfoRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewPciInfoRef(ref unsafe.Pointer) *PciInfo {
	if ref == nil {
		return nil
	}
	obj := new(PciInfo)
	obj.ref71ae7c45 = (*C.tcmlPciInfo_t)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *PciInfo) PassRef() (*C.tcmlPciInfo_t, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.ref71ae7c45 != nil {
		return x.ref71ae7c45, nil
	}
	mem71ae7c45 := allocPciInfoMemory(1)
	ref71ae7c45 := (*C.tcmlPciInfo_t)(mem71ae7c45)
	allocs71ae7c45 := new(cgoAllocMap)
	allocs71ae7c45.Add(mem71ae7c45)

	var cbusIdLegacy_allocs *cgoAllocMap
	ref71ae7c45.busIdLegacy, cbusIdLegacy_allocs = *(*[16]C.char)(unsafe.Pointer(&x.BusIdLegacy)), cgoAllocsUnknown
	allocs71ae7c45.Borrow(cbusIdLegacy_allocs)

	var cdomain_allocs *cgoAllocMap
	ref71ae7c45.domain, cdomain_allocs = (C.uint32_t)(x.Domain), cgoAllocsUnknown
	allocs71ae7c45.Borrow(cdomain_allocs)

	var cbus_allocs *cgoAllocMap
	ref71ae7c45.bus, cbus_allocs = (C.uint32_t)(x.Bus), cgoAllocsUnknown
	allocs71ae7c45.Borrow(cbus_allocs)

	var cdevice_allocs *cgoAllocMap
	ref71ae7c45.device, cdevice_allocs = (C.uint32_t)(x.Device), cgoAllocsUnknown
	allocs71ae7c45.Borrow(cdevice_allocs)

	var cfunction_allocs *cgoAllocMap
	ref71ae7c45.function, cfunction_allocs = (C.uint32_t)(x.Function), cgoAllocsUnknown
	allocs71ae7c45.Borrow(cfunction_allocs)

	var cpciDeviceId_allocs *cgoAllocMap
	ref71ae7c45.pciDeviceId, cpciDeviceId_allocs = (C.uint32_t)(x.PciDeviceId), cgoAllocsUnknown
	allocs71ae7c45.Borrow(cpciDeviceId_allocs)

	var cpciSubSystemId_allocs *cgoAllocMap
	ref71ae7c45.pciSubSystemId, cpciSubSystemId_allocs = (C.uint32_t)(x.PciSubSystemId), cgoAllocsUnknown
	allocs71ae7c45.Borrow(cpciSubSystemId_allocs)

	var cbusId_allocs *cgoAllocMap
	ref71ae7c45.busId, cbusId_allocs = *(*[32]C.char)(unsafe.Pointer(&x.BusId)), cgoAllocsUnknown
	allocs71ae7c45.Borrow(cbusId_allocs)

	x.ref71ae7c45 = ref71ae7c45
	x.allocs71ae7c45 = allocs71ae7c45
	return ref71ae7c45, allocs71ae7c45

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x PciInfo) PassValue() (C.tcmlPciInfo_t, *cgoAllocMap) {
	if x.ref71ae7c45 != nil {
		return *x.ref71ae7c45, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *PciInfo) Deref() {
	if x.ref71ae7c45 == nil {
		return
	}
	x.BusIdLegacy = *(*[16]byte)(unsafe.Pointer(&x.ref71ae7c45.busIdLegacy))
	x.Domain = (uint32)(x.ref71ae7c45.domain)
	x.Bus = (uint32)(x.ref71ae7c45.bus)
	x.Device = (uint32)(x.ref71ae7c45.device)
	x.Function = (uint32)(x.ref71ae7c45.function)
	x.PciDeviceId = (uint32)(x.ref71ae7c45.pciDeviceId)
	x.PciSubSystemId = (uint32)(x.ref71ae7c45.pciSubSystemId)
	x.BusId = *(*[32]byte)(unsafe.Pointer(&x.ref71ae7c45.busId))
}

// packPCharString creates a Go string backed by *C.char and avoids copying.
func packPCharString(p *C.char) (raw string) {
	if p != nil && *p != 0 {
		h := (*stringHeader)(unsafe.Pointer(&raw))
		h.Data = unsafe.Pointer(p)
		for *p != 0 {
			p = (*C.char)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 1)) // p++
		}
		h.Len = int(uintptr(unsafe.Pointer(p)) - uintptr(h.Data))
	}
	return
}

type stringHeader struct {
	Data unsafe.Pointer
	Len  int
}

// RawString reperesents a string backed by data on the C side.
type RawString string

// Copy returns a Go-managed copy of raw string.
func (raw RawString) Copy() string {
	if len(raw) == 0 {
		return ""
	}
	h := (*stringHeader)(unsafe.Pointer(&raw))
	return C.GoStringN((*C.char)(h.Data), C.int(h.Len))
}

type sliceHeader struct {
	Data unsafe.Pointer
	Len  int
	Cap  int
}

// copyPUint32Bytes copies the data from Go slice as *C.uint32_t.
func copyPUint32Bytes(slice *sliceHeader) (*C.uint32_t, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CBytes(*(*[]byte)(unsafe.Pointer(&sliceHeader{
		Data: slice.Data,
		Len:  int(sizeOfUint32Value) * slice.Len,
		Cap:  int(sizeOfUint32Value) * slice.Len,
	}))))
	allocs.Add(mem0)

	return (*C.uint32_t)(mem0), allocs
}

// allocUint32Memory allocates memory for type C.uint32_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocUint32Memory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfUint32Value))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfUint32Value = unsafe.Sizeof([1]C.uint32_t{})

// copyPCharBytes copies the data from Go slice as *C.char.
func copyPCharBytes(slice *sliceHeader) (*C.char, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CBytes(*(*[]byte)(unsafe.Pointer(&sliceHeader{
		Data: slice.Data,
		Len:  int(sizeOfCharValue) * slice.Len,
		Cap:  int(sizeOfCharValue) * slice.Len,
	}))))
	allocs.Add(mem0)

	return (*C.char)(mem0), allocs
}

// allocCharMemory allocates memory for type C.char in C.
// The caller is responsible for freeing the this memory via C.free.
func allocCharMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfCharValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfCharValue = unsafe.Sizeof([1]C.char{})

const sizeOfPtr = unsafe.Sizeof(&struct{}{})

// unpackArgSPciInfo transforms a sliced Go data structure into plain C format.
func unpackArgSPciInfo(x []PciInfo) (unpacked *C.tcmlPciInfo_t, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocPciInfoMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.tcmlPciInfo_t)(unsafe.Pointer(h0))
	for i0 := range x {
		allocs0 := new(cgoAllocMap)
		v0[i0], allocs0 = x[i0].PassValue()
		allocs.Borrow(allocs0)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.tcmlPciInfo_t)(h.Data)
	return
}

// packSPciInfo reads sliced Go data structure out from plain C format.
func packSPciInfo(v []PciInfo, ptr0 *C.tcmlPciInfo_t) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfPciInfoValue]C.tcmlPciInfo_t)(unsafe.Pointer(ptr0)))[i0]
		v[i0] = *NewPciInfoRef(unsafe.Pointer(&ptr1))
	}
}

// copyPUintBytes copies the data from Go slice as *C.uint.
func copyPUintBytes(slice *sliceHeader) (*C.uint, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CBytes(*(*[]byte)(unsafe.Pointer(&sliceHeader{
		Data: slice.Data,
		Len:  int(sizeOfUintValue) * slice.Len,
		Cap:  int(sizeOfUintValue) * slice.Len,
	}))))
	allocs.Add(mem0)

	return (*C.uint)(mem0), allocs
}

// allocUintMemory allocates memory for type C.uint in C.
// The caller is responsible for freeing the this memory via C.free.
func allocUintMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfUintValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfUintValue = unsafe.Sizeof([1]C.uint{})

// unpackArgSClock transforms a sliced Go data structure into plain C format.
func unpackArgSClock(x []Clock) (unpacked *C.tcmlClock_t, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocClockMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.tcmlClock_t)(unsafe.Pointer(h0))
	for i0 := range x {
		allocs0 := new(cgoAllocMap)
		v0[i0], allocs0 = x[i0].PassValue()
		allocs.Borrow(allocs0)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.tcmlClock_t)(h.Data)
	return
}

// packSClock reads sliced Go data structure out from plain C format.
func packSClock(v []Clock, ptr0 *C.tcmlClock_t) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfClockValue]C.tcmlClock_t)(unsafe.Pointer(ptr0)))[i0]
		v[i0] = *NewClockRef(unsafe.Pointer(&ptr1))
	}
}

// unpackArgSUtilization transforms a sliced Go data structure into plain C format.
func unpackArgSUtilization(x []Utilization) (unpacked *C.tcmlUtilization_t, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocUtilizationMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.tcmlUtilization_t)(unsafe.Pointer(h0))
	for i0 := range x {
		allocs0 := new(cgoAllocMap)
		v0[i0], allocs0 = x[i0].PassValue()
		allocs.Borrow(allocs0)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.tcmlUtilization_t)(h.Data)
	return
}

// packSUtilization reads sliced Go data structure out from plain C format.
func packSUtilization(v []Utilization, ptr0 *C.tcmlUtilization_t) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfUtilizationValue]C.tcmlUtilization_t)(unsafe.Pointer(ptr0)))[i0]
		v[i0] = *NewUtilizationRef(unsafe.Pointer(&ptr1))
	}
}

// unpackArgSMemory transforms a sliced Go data structure into plain C format.
func unpackArgSMemory(x []Memory) (unpacked *C.tcmlMemory_t, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocMemoryMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.tcmlMemory_t)(unsafe.Pointer(h0))
	for i0 := range x {
		allocs0 := new(cgoAllocMap)
		v0[i0], allocs0 = x[i0].PassValue()
		allocs.Borrow(allocs0)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.tcmlMemory_t)(h.Data)
	return
}

// packSMemory reads sliced Go data structure out from plain C format.
func packSMemory(v []Memory, ptr0 *C.tcmlMemory_t) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfMemoryValue]C.tcmlMemory_t)(unsafe.Pointer(ptr0)))[i0]
		v[i0] = *NewMemoryRef(unsafe.Pointer(&ptr1))
	}
}

// copyPUint64Bytes copies the data from Go slice as *C.uint64_t.
func copyPUint64Bytes(slice *sliceHeader) (*C.uint64_t, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CBytes(*(*[]byte)(unsafe.Pointer(&sliceHeader{
		Data: slice.Data,
		Len:  int(sizeOfUint64Value) * slice.Len,
		Cap:  int(sizeOfUint64Value) * slice.Len,
	}))))
	allocs.Add(mem0)

	return (*C.uint64_t)(mem0), allocs
}

// allocUint64Memory allocates memory for type C.uint64_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocUint64Memory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfUint64Value))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfUint64Value = unsafe.Sizeof([1]C.uint64_t{})

// copyPFloatBytes copies the data from Go slice as *C.float.
func copyPFloatBytes(slice *sliceHeader) (*C.float, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CBytes(*(*[]byte)(unsafe.Pointer(&sliceHeader{
		Data: slice.Data,
		Len:  int(sizeOfFloatValue) * slice.Len,
		Cap:  int(sizeOfFloatValue) * slice.Len,
	}))))
	allocs.Add(mem0)

	return (*C.float)(mem0), allocs
}

// allocFloatMemory allocates memory for type C.float in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFloatMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFloatValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFloatValue = unsafe.Sizeof([1]C.float{})

// copyPCardTopologyLevelBytes copies the data from Go slice as *C.tcmlCardTopologyLevel_t.
func copyPCardTopologyLevelBytes(slice *sliceHeader) (*C.tcmlCardTopologyLevel_t, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CBytes(*(*[]byte)(unsafe.Pointer(&sliceHeader{
		Data: slice.Data,
		Len:  int(sizeOfCardTopologyLevelValue) * slice.Len,
		Cap:  int(sizeOfCardTopologyLevelValue) * slice.Len,
	}))))
	allocs.Add(mem0)

	return (*C.tcmlCardTopologyLevel_t)(mem0), allocs
}

// allocCardTopologyLevelMemory allocates memory for type C.tcmlCardTopologyLevel_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocCardTopologyLevelMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfCardTopologyLevelValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfCardTopologyLevelValue = unsafe.Sizeof([1]C.tcmlCardTopologyLevel_t{})

// copyPCardP2PStatusBytes copies the data from Go slice as *C.tcmlCardP2PStatus_t.
func copyPCardP2PStatusBytes(slice *sliceHeader) (*C.tcmlCardP2PStatus_t, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CBytes(*(*[]byte)(unsafe.Pointer(&sliceHeader{
		Data: slice.Data,
		Len:  int(sizeOfCardP2PStatusValue) * slice.Len,
		Cap:  int(sizeOfCardP2PStatusValue) * slice.Len,
	}))))
	allocs.Add(mem0)

	return (*C.tcmlCardP2PStatus_t)(mem0), allocs
}

// allocCardP2PStatusMemory allocates memory for type C.tcmlCardP2PStatus_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocCardP2PStatusMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfCardP2PStatusValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfCardP2PStatusValue = unsafe.Sizeof([1]C.tcmlCardP2PStatus_t{})
