// WARNING: This file has automatically been generated on Thu, 18 Apr 2024 15:59:58 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package tcml

/*
#include "tcml.h"
#include "stdlib.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// TcmlInitWithFlags function as declared in ts_c4go/tcml.h:231
func TcmlInitWithFlags(flags uint64) Return {
	cflags, cflagsAllocMap := (C.uint64_t)(flags), cgoAllocsUnknown
	__ret := C.tcmlInitWithFlags(cflags)
	runtime.KeepAlive(cflagsAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlShutdown function as declared in ts_c4go/tcml.h:234
func TcmlShutdown() Return {
	__ret := C.tcmlShutdown()
	__v := (Return)(__ret)
	return __v
}

// TcmlErrorString function as declared in ts_c4go/tcml.h:237
func TcmlErrorString(result Return) string {
	cresult, cresultAllocMap := (C.tcmlReturn_t)(result), cgoAllocsUnknown
	__ret := C.tcmlErrorString(cresult)
	runtime.KeepAlive(cresultAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// TcmlDeviceGetCount function as declared in ts_c4go/tcml.h:240
func TcmlDeviceGetCount(deviceCount []uint32) Return {
	cdeviceCount, cdeviceCountAllocMap := copyPUint32Bytes((*sliceHeader)(unsafe.Pointer(&deviceCount)))
	__ret := C.tcmlDeviceGetCount(cdeviceCount)
	runtime.KeepAlive(cdeviceCountAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlSystemGetTCMLVersion function as declared in ts_c4go/tcml.h:243
func TcmlSystemGetTCMLVersion(version []byte, length uint32) Return {
	cversion, cversionAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&version)))
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	__ret := C.tcmlSystemGetTCMLVersion(cversion, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cversionAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlSystemGetSdaaDriverVersion function as declared in ts_c4go/tcml.h:246
func TcmlSystemGetSdaaDriverVersion(version []byte, length uint32) Return {
	cversion, cversionAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&version)))
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	__ret := C.tcmlSystemGetSdaaDriverVersion(cversion, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cversionAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlSystemGetFirmwareVersion function as declared in ts_c4go/tcml.h:249
func TcmlSystemGetFirmwareVersion(dvInd uint32, version []byte, length uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cversion, cversionAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&version)))
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	__ret := C.tcmlSystemGetFirmwareVersion(cdvInd, cversion, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cversionAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlSystemGetSdaaRuntimeVersion function as declared in ts_c4go/tcml.h:253
func TcmlSystemGetSdaaRuntimeVersion(version []byte, length uint32) Return {
	cversion, cversionAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&version)))
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	__ret := C.tcmlSystemGetSdaaRuntimeVersion(cversion, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cversionAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetBiosVersion function as declared in ts_c4go/tcml.h:256
func TcmlDeviceGetBiosVersion(dvInd uint32, version []byte, length uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cversion, cversionAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&version)))
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	__ret := C.tcmlDeviceGetBiosVersion(cdvInd, cversion, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cversionAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetCurrPcieLinkGeneration function as declared in ts_c4go/tcml.h:260
func TcmlDeviceGetCurrPcieLinkGeneration(device uint32, currLinkGen []uint32) Return {
	cdevice, cdeviceAllocMap := (C.uint32_t)(device), cgoAllocsUnknown
	ccurrLinkGen, ccurrLinkGenAllocMap := copyPUint32Bytes((*sliceHeader)(unsafe.Pointer(&currLinkGen)))
	__ret := C.tcmlDeviceGetCurrPcieLinkGeneration(cdevice, ccurrLinkGen)
	runtime.KeepAlive(ccurrLinkGenAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetMaxPcieLinkGeneration function as declared in ts_c4go/tcml.h:262
func TcmlDeviceGetMaxPcieLinkGeneration(device uint32, maxLinkGen []uint32) Return {
	cdevice, cdeviceAllocMap := (C.uint32_t)(device), cgoAllocsUnknown
	cmaxLinkGen, cmaxLinkGenAllocMap := copyPUint32Bytes((*sliceHeader)(unsafe.Pointer(&maxLinkGen)))
	__ret := C.tcmlDeviceGetMaxPcieLinkGeneration(cdevice, cmaxLinkGen)
	runtime.KeepAlive(cmaxLinkGenAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetCurrPcieLinkWidth function as declared in ts_c4go/tcml.h:264
func TcmlDeviceGetCurrPcieLinkWidth(device uint32, currLinkWidth []uint32) Return {
	cdevice, cdeviceAllocMap := (C.uint32_t)(device), cgoAllocsUnknown
	ccurrLinkWidth, ccurrLinkWidthAllocMap := copyPUint32Bytes((*sliceHeader)(unsafe.Pointer(&currLinkWidth)))
	__ret := C.tcmlDeviceGetCurrPcieLinkWidth(cdevice, ccurrLinkWidth)
	runtime.KeepAlive(ccurrLinkWidthAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetMaxPcieLinkWidth function as declared in ts_c4go/tcml.h:266
func TcmlDeviceGetMaxPcieLinkWidth(device uint32, maxLinkWidth []uint32) Return {
	cdevice, cdeviceAllocMap := (C.uint32_t)(device), cgoAllocsUnknown
	cmaxLinkWidth, cmaxLinkWidthAllocMap := copyPUint32Bytes((*sliceHeader)(unsafe.Pointer(&maxLinkWidth)))
	__ret := C.tcmlDeviceGetMaxPcieLinkWidth(cdevice, cmaxLinkWidth)
	runtime.KeepAlive(cmaxLinkWidthAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetPciInfo function as declared in ts_c4go/tcml.h:284
func TcmlDeviceGetPciInfo(dvInd uint32, pci []PciInfo) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cpci, cpciAllocMap := unpackArgSPciInfo(pci)
	__ret := C.tcmlDeviceGetPciInfo(cdvInd, cpci)
	packSPciInfo(pci, cpci)
	runtime.KeepAlive(cpciAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetPcieThroughput function as declared in ts_c4go/tcml.h:287
func TcmlDeviceGetPcieThroughput(dvInd uint32, counter PcieUtilCounter, value []uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	ccounter, ccounterAllocMap := (C.tcmlPcieUtilCounter_t)(counter), cgoAllocsUnknown
	cvalue, cvalueAllocMap := copyPUint32Bytes((*sliceHeader)(unsafe.Pointer(&value)))
	__ret := C.tcmlDeviceGetPcieThroughput(cdvInd, ccounter, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(ccounterAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetSerialNum function as declared in ts_c4go/tcml.h:292
func TcmlDeviceGetSerialNum(dvInd uint32, serialNum []byte, length uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cserialNum, cserialNumAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&serialNum)))
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	__ret := C.tcmlDeviceGetSerialNum(cdvInd, cserialNum, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cserialNumAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetSupportedSpeClocks function as declared in ts_c4go/tcml.h:296
func TcmlDeviceGetSupportedSpeClocks(dvInd uint32, count []uint32, clocksMHz []uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	ccount, ccountAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&count)))
	cclocksMHz, cclocksMHzAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&clocksMHz)))
	__ret := C.tcmlDeviceGetSupportedSpeClocks(cdvInd, ccount, cclocksMHz)
	runtime.KeepAlive(cclocksMHzAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceSetSpeLockedClocks function as declared in ts_c4go/tcml.h:301
func TcmlDeviceSetSpeLockedClocks(dvInd uint32, speClockMHz uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cspeClockMHz, cspeClockMHzAllocMap := (C.uint32_t)(speClockMHz), cgoAllocsUnknown
	__ret := C.tcmlDeviceSetSpeLockedClocks(cdvInd, cspeClockMHz)
	runtime.KeepAlive(cspeClockMHzAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceResetSpeLockedClocks function as declared in ts_c4go/tcml.h:305
func TcmlDeviceResetSpeLockedClocks(dvInd uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	__ret := C.tcmlDeviceResetSpeLockedClocks(cdvInd)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetClock function as declared in ts_c4go/tcml.h:308
func TcmlDeviceGetClock(dvInd uint32, kind ClockType, clock []Clock) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.tcmlClockType_t)(kind), cgoAllocsUnknown
	cclock, cclockAllocMap := unpackArgSClock(clock)
	__ret := C.tcmlDeviceGetClock(cdvInd, ckind, cclock)
	packSClock(clock, cclock)
	runtime.KeepAlive(cclockAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetUuid function as declared in ts_c4go/tcml.h:312
func TcmlDeviceGetUuid(dvInd uint32, uuid []byte, length uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cuuid, cuuidAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&uuid)))
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	__ret := C.tcmlDeviceGetUuid(cdvInd, cuuid, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cuuidAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetProductName function as declared in ts_c4go/tcml.h:315
func TcmlDeviceGetProductName(dvInd uint32, productname []byte, length uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cproductname, cproductnameAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&productname)))
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	__ret := C.tcmlDeviceGetProductName(cdvInd, cproductname, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cproductnameAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetProductArchitecture function as declared in ts_c4go/tcml.h:319
func TcmlDeviceGetProductArchitecture(dvInd uint32, architecture []byte, length uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	carchitecture, carchitectureAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&architecture)))
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	__ret := C.tcmlDeviceGetProductArchitecture(cdvInd, carchitecture, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(carchitectureAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetUtilizationRates function as declared in ts_c4go/tcml.h:324
func TcmlDeviceGetUtilizationRates(dvInd uint32, utilization []Utilization) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cutilization, cutilizationAllocMap := unpackArgSUtilization(utilization)
	__ret := C.tcmlDeviceGetUtilizationRates(cdvInd, cutilization)
	packSUtilization(utilization, cutilization)
	runtime.KeepAlive(cutilizationAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetMemoryInfo function as declared in ts_c4go/tcml.h:328
func TcmlDeviceGetMemoryInfo(dvInd uint32, memory []Memory) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cmemory, cmemoryAllocMap := unpackArgSMemory(memory)
	__ret := C.tcmlDeviceGetMemoryInfo(cdvInd, cmemory)
	packSMemory(memory, cmemory)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetProcessInfo function as declared in ts_c4go/tcml.h:331
func TcmlDeviceGetProcessInfo(dvInd uint32, processInfo []byte, length uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cprocessInfo, cprocessInfoAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&processInfo)))
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	__ret := C.tcmlDeviceGetProcessInfo(cdvInd, cprocessInfo, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cprocessInfoAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetHealthByID function as declared in ts_c4go/tcml.h:335
func TcmlDeviceGetHealthByID(dvInd uint32, errorId []uint64) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cerrorId, cerrorIdAllocMap := copyPUint64Bytes((*sliceHeader)(unsafe.Pointer(&errorId)))
	__ret := C.tcmlDeviceGetHealthByID(cdvInd, cerrorId)
	runtime.KeepAlive(cerrorIdAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetTemperature function as declared in ts_c4go/tcml.h:338
func TcmlDeviceGetTemperature(dvInd uint32, temperature []float32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	ctemperature, ctemperatureAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&temperature)))
	__ret := C.tcmlDeviceGetTemperature(cdvInd, ctemperature)
	runtime.KeepAlive(ctemperatureAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetTemperatureThreshold function as declared in ts_c4go/tcml.h:339
func TcmlDeviceGetTemperatureThreshold(dvInd uint32, thresholdType TemperatureThresholds, temp []uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cthresholdType, cthresholdTypeAllocMap := (C.tcmlTemperatureThresholds_t)(thresholdType), cgoAllocsUnknown
	ctemp, ctempAllocMap := copyPUintBytes((*sliceHeader)(unsafe.Pointer(&temp)))
	__ret := C.tcmlDeviceGetTemperatureThreshold(cdvInd, cthresholdType, ctemp)
	runtime.KeepAlive(ctempAllocMap)
	runtime.KeepAlive(cthresholdTypeAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetChipVoltage function as declared in ts_c4go/tcml.h:342
func TcmlDeviceGetChipVoltage(dvInd uint32, voltage []float32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cvoltage, cvoltageAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&voltage)))
	__ret := C.tcmlDeviceGetChipVoltage(cdvInd, cvoltage)
	runtime.KeepAlive(cvoltageAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetChipCurrent function as declared in ts_c4go/tcml.h:343
func TcmlDeviceGetChipCurrent(dvInd uint32, current []float32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	ccurrent, ccurrentAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&current)))
	__ret := C.tcmlDeviceGetChipCurrent(cdvInd, ccurrent)
	runtime.KeepAlive(ccurrentAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetChipPower function as declared in ts_c4go/tcml.h:344
func TcmlDeviceGetChipPower(dvInd uint32, power []float32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cpower, cpowerAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&power)))
	__ret := C.tcmlDeviceGetChipPower(cdvInd, cpower)
	runtime.KeepAlive(cpowerAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetHbmVoltage function as declared in ts_c4go/tcml.h:345
func TcmlDeviceGetHbmVoltage(dvInd uint32, voltage []float32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cvoltage, cvoltageAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&voltage)))
	__ret := C.tcmlDeviceGetHbmVoltage(cdvInd, cvoltage)
	runtime.KeepAlive(cvoltageAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetHbmCurrent function as declared in ts_c4go/tcml.h:346
func TcmlDeviceGetHbmCurrent(dvInd uint32, current []float32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	ccurrent, ccurrentAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&current)))
	__ret := C.tcmlDeviceGetHbmCurrent(cdvInd, ccurrent)
	runtime.KeepAlive(ccurrentAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetHbmPower function as declared in ts_c4go/tcml.h:347
func TcmlDeviceGetHbmPower(dvInd uint32, power []float32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cpower, cpowerAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&power)))
	__ret := C.tcmlDeviceGetHbmPower(cdvInd, cpower)
	runtime.KeepAlive(cpowerAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetMcuSoftwareVersion function as declared in ts_c4go/tcml.h:348
func TcmlDeviceGetMcuSoftwareVersion(dvInd uint32, mcuVersion []byte, length uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cmcuVersion, cmcuVersionAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&mcuVersion)))
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	__ret := C.tcmlDeviceGetMcuSoftwareVersion(cdvInd, cmcuVersion, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cmcuVersionAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetPcbVersion function as declared in ts_c4go/tcml.h:350
func TcmlDeviceGetPcbVersion(dvInd uint32, pcbVersion []byte, length uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cpcbVersion, cpcbVersionAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&pcbVersion)))
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	__ret := C.tcmlDeviceGetPcbVersion(cdvInd, cpcbVersion, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cpcbVersionAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetTopologyCommonAncestor function as declared in ts_c4go/tcml.h:354
func TcmlDeviceGetTopologyCommonAncestor(device1 uint32, device2 uint32, pathInfo []CardTopologyLevel) Return {
	cdevice1, cdevice1AllocMap := (C.uint32_t)(device1), cgoAllocsUnknown
	cdevice2, cdevice2AllocMap := (C.uint32_t)(device2), cgoAllocsUnknown
	cpathInfo, cpathInfoAllocMap := copyPCardTopologyLevelBytes((*sliceHeader)(unsafe.Pointer(&pathInfo)))
	__ret := C.tcmlDeviceGetTopologyCommonAncestor(cdevice1, cdevice2, cpathInfo)
	runtime.KeepAlive(cpathInfoAllocMap)
	runtime.KeepAlive(cdevice2AllocMap)
	runtime.KeepAlive(cdevice1AllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetCpuAffinity function as declared in ts_c4go/tcml.h:356
func TcmlDeviceGetCpuAffinity(dvInd uint32, cpuList []byte, length uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	ccpuList, ccpuListAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&cpuList)))
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	__ret := C.tcmlDeviceGetCpuAffinity(cdvInd, ccpuList, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(ccpuListAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetNodeAffinity function as declared in ts_c4go/tcml.h:358
func TcmlDeviceGetNodeAffinity(dvInd uint32, nodeSet []uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cnodeSet, cnodeSetAllocMap := copyPUint32Bytes((*sliceHeader)(unsafe.Pointer(&nodeSet)))
	__ret := C.tcmlDeviceGetNodeAffinity(cdvInd, cnodeSet)
	runtime.KeepAlive(cnodeSetAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetP2PStatus function as declared in ts_c4go/tcml.h:359
func TcmlDeviceGetP2PStatus(device1 uint32, device2 uint32, p2pIndex CardP2PCapsIndex, p2pStatus []CardP2PStatus) Return {
	cdevice1, cdevice1AllocMap := (C.uint32_t)(device1), cgoAllocsUnknown
	cdevice2, cdevice2AllocMap := (C.uint32_t)(device2), cgoAllocsUnknown
	cp2pIndex, cp2pIndexAllocMap := (C.tcmlCardP2PCapsIndex_t)(p2pIndex), cgoAllocsUnknown
	cp2pStatus, cp2pStatusAllocMap := copyPCardP2PStatusBytes((*sliceHeader)(unsafe.Pointer(&p2pStatus)))
	__ret := C.tcmlDeviceGetP2PStatus(cdevice1, cdevice2, cp2pIndex, cp2pStatus)
	runtime.KeepAlive(cp2pStatusAllocMap)
	runtime.KeepAlive(cp2pIndexAllocMap)
	runtime.KeepAlive(cdevice2AllocMap)
	runtime.KeepAlive(cdevice1AllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetPcieReplayCounter function as declared in ts_c4go/tcml.h:363
func TcmlDeviceGetPcieReplayCounter(dvInd uint32, value []uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cvalue, cvalueAllocMap := copyPUint32Bytes((*sliceHeader)(unsafe.Pointer(&value)))
	__ret := C.tcmlDeviceGetPcieReplayCounter(cdvInd, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceGetViolationStatus function as declared in ts_c4go/tcml.h:365
func TcmlDeviceGetViolationStatus(dvInd uint32, perfPolicyType PerfPolicyType, violTime []byte, length uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	cperfPolicyType, cperfPolicyTypeAllocMap := (C.tcmlPerfPolicyType_t)(perfPolicyType), cgoAllocsUnknown
	cviolTime, cviolTimeAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&violTime)))
	clength, clengthAllocMap := (C.uint32_t)(length), cgoAllocsUnknown
	__ret := C.tcmlDeviceGetViolationStatus(cdvInd, cperfPolicyType, cviolTime, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cviolTimeAllocMap)
	runtime.KeepAlive(cperfPolicyTypeAllocMap)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}

// TcmlDeviceReset function as declared in ts_c4go/tcml.h:369
func TcmlDeviceReset(dvInd uint32) Return {
	cdvInd, cdvIndAllocMap := (C.uint32_t)(dvInd), cgoAllocsUnknown
	__ret := C.tcmlDeviceReset(cdvInd)
	runtime.KeepAlive(cdvIndAllocMap)
	__v := (Return)(__ret)
	return __v
}
